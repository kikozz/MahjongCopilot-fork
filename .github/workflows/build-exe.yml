name: Build Windows EXE (pure onedir)

on:
  push:
    branches: [ main, master ]
  pull_request:
  tags:
    - 'v*'   # 打 tag 自动发 Release

jobs:
  build:
    runs-on: windows-latest
    env:
      APP_NAME: MahjongCopilot
      ENTRY_SCRIPT: main.py           # 入口脚本
      PY_VERSION: '3.11'
      ICON_PATH: resources\\icon.ico  # 没图标就删掉这行和对应参数

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller==5.11.0

      - name: Build (PyInstaller onedir → _internal only)
        shell: pwsh
        run: |
          if (Test-Path build) { Remove-Item build -Recurse -Force }
          if (Test-Path dist)  { Remove-Item dist  -Recurse -Force }

          $icon = (Test-Path $env:ICON_PATH) ? "--icon=`"$env:ICON_PATH`"" : ""

          # 关键参数：--contents-directory _internal
          pyinstaller `
            --name "$env:APP_NAME" `
            --noconsole `
            --contents-directory _internal `
            $icon `
            "$env:ENTRY_SCRIPT"

          $outDir = Join-Path "dist" "$env:APP_NAME"
          $exe = Join-Path $outDir ("$env:APP_NAME.exe")
          if (!(Test-Path $exe)) { throw "Executable not found: $exe" }
          if (!(Test-Path (Join-Path $outDir "_internal"))) { throw "_internal not found. Check build logs." }

      - name: Archive (zip the onedir folder)
        shell: pwsh
        run: |
          $outDir = Join-Path "dist" "$env:APP_NAME"
          $zip = "dist\${{ env.APP_NAME }}-win64.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path "$outDir\*" -DestinationPath $zip -Force
          echo "ZIP_PATH=$zip" >> $env:GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-onedir
          path: ${{ env.ZIP_PATH || format('dist/{0}-win64.zip', env.APP_NAME) }}
          if-no-files-found: error
          retention-days: 7

      - name: Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ZIP_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
