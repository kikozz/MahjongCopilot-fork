name: Build Windows EXE (onedir, exe + _internal)

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]        # 打 vX.Y.Z 的 tag 时也会触发（并上传 Release）
  pull_request:

jobs:
  build:
    runs-on: windows-latest
    env:
      APP_NAME: MahjongCopilot
      ENTRY_SCRIPT: main.py              # 入口脚本（在仓库根目录；若在子目录请写相对路径）
      PY_VERSION: '3.11'
      ICON_PATH: resources\\icon.ico     # 有图标就保留；没有可删这一行

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # 用 6.x 才支持 --contents-directory（让依赖进 _internal）
          pip install pyinstaller==6.6.0

      - name: Build (PyInstaller onedir → _internal)
        shell: pwsh
        run: |
          if (Test-Path build) { Remove-Item build -Recurse -Force }
          if (Test-Path dist)  { Remove-Item dist  -Recurse -Force }

          Write-Host "CWD: $(Get-Location)"
          if (Test-Path resources) { Write-Host "resources listing:"; Get-ChildItem resources -Name }

          # 以“数组”方式传参，避免引号/转义导致的路径拼接错误
          $args = @(
            "--name", $env:APP_NAME,
            "--noconsole",
            "--contents-directory", "_internal",
            $env:ENTRY_SCRIPT
          )

          if ($env:ICON_PATH -and (Test-Path $env:ICON_PATH)) {
            Write-Host "Using icon: $env:ICON_PATH"
            $args = @("--name", $env:APP_NAME, "--noconsole", "--contents-directory", "_internal", "--icon", $env:ICON_PATH, $env:ENTRY_SCRIPT)
          } else {
            Write-Warning "ICON not found or empty, building without icon."
          }

          Write-Host "PyInstaller args: $args"
          pyinstaller @args

          $outDir = Join-Path "dist" "$env:APP_NAME"
          if (!(Test-Path (Join-Path $outDir "$env:APP_NAME.exe"))) { throw "exe not found" }
          if (!(Test-Path (Join-Path $outDir "_internal"))) { throw "_internal not found" }

      - name: Archive (zip the onedir folder)
        shell: pwsh
        run: |
          $outDir = Join-Path "dist" "$env:APP_NAME"
          $zip = "dist\${{ env.APP_NAME }}-win64.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path "$outDir\*" -DestinationPath $zip -Force
          echo "ZIP_PATH=$zip" >> $env:GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-onedir
          path: ${{ env.ZIP_PATH || format('dist/{0}-win64.zip', env.APP_NAME) }}
          if-no-files-found: error
          retention-days: 7

      - name: Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ZIP_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
