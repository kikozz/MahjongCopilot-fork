name: Build Windows EXE (PyInstaller + Playwright)

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

permissions:
  contents: write  # 允许创建 Release

env:
  APP_NAME: MyApp               # 改成你的应用名
  ENTRYPOINT: main.py           # 入口脚本
  REQS_FILE: requirements.txt   # 依赖清单
  ICON_PATH: assets/app.ico     # 可选：图标（没有就保持不存在）

jobs:
  build-win:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles(env.REQS_FILE) }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Create venv & install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1

          if (Test-Path $env:REQS_FILE) { pip install -r $env:REQS_FILE }

          # 安装打包和浏览器依赖
          pip install pyinstaller playwright
          playwright install chromium

      - name: Build EXE with PyInstaller
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          $extraArgs = ""
          if (Test-Path $env:ICON_PATH) { $extraArgs = "--icon `"$env:ICON_PATH`"" }
          # 如果是 GUI 程序想隐藏黑窗，取消下一行注释：
          # $extraArgs = "$extraArgs --noconsole"

          .\.venv\Scripts\pyinstaller `
            --noconfirm `
            --clean `
            --onefile `
            --name "$env:APP_NAME" `
            $extraArgs `
            "$env:ENTRYPOINT"

      - name: Package artifact (zip)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path build_out | Out-Null
          if (Test-Path "dist\${env:APP_NAME}.exe") {
            Copy-Item "dist\${env:APP_NAME}.exe" build_out -Force
          } elseif (Test-Path "dist\${env:APP_NAME}\${env:APP_NAME}.exe") {
            Copy-Item "dist\${env:APP_NAME}\*" build_out -Recurse -Force
          } else {
            Copy-Item "dist\*" build_out -Recurse -Force
          }
          Compress-Archive -Path build_out\* -DestinationPath "${env:APP_NAME}-win-${{ matrix.python-version }}.zip" -Force

      - name: Upload artifact (CI)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-win-${{ matrix.python-version }}
          path: ${{ env.APP_NAME }}-win-${{ matrix.python-version }}.zip

      - name: Release on tag
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.APP_NAME }}-win-${{ matrix.python-version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
