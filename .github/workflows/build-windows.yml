name: Build Windows Dir Package

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build-win:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build (onedir layout)
        shell: pwsh
        run: |
          pyinstaller --onedir --noconsole --name MahjongCopilot `
            --add-data "_internal;_internal" `
            --add-data "chrome_ext;chrome_ext" `
            --add-data "libriichi3p;libriichi3p" `
            --add-data "liqi_proto;liqi_proto" `
            --add-data "models;models" `
            --add-data "proxinject;proxinject" `
            --add-data "resources;resources" `
            main.py

      - name: Shape output tree + write version
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path package | Out-Null
          Copy-Item -Recurse -Force "dist\MahjongCopilot\*" "package\"
          if (Test-Path "package\main.exe") { Move-Item -Force "package\main.exe" "package\MahjongCopilot.exe" }

          # 用表达式取原始值，再在 PowerShell 里 Substring
          $refType = "${{ github.ref_type }}"
          $refName = "${{ github.ref_name }}"
          $sha     = "${{ github.sha }}"
          if ($refType -eq 'tag') { $ver = $refName } else { $ver = $sha.Substring(0,7) }
          Set-Content -Path "package\version" -Value $ver -Encoding ASCII

          Write-Host "==== package tree ===="
          cmd /c tree package /F

      - name: Validate expected tree
        shell: pwsh
        run: |
          $required = @(
            "_internal","chrome_ext","libriichi3p","liqi_proto",
            "models","proxinject","resources",
            "MahjongCopilot.exe","version"
          )
          foreach ($item in $required) {
            if (-not (Test-Path -LiteralPath ("package\" + $item))) {
              throw "Missing: package\$item"
            }
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: MahjongCopilot_windows_dir
          path: package
